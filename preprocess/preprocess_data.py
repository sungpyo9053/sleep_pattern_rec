import pandas as pd
from collections import namedtuple

SleepNotes = namedtuple('SleepNotes', 'drank_coffee drank_tea stressful_day worked_out ate_late')


def convert_to_minutes(s):
    """
    Converts "HH:MM"-like string to minute count, e.g. 2:45 to 165.
    :param s: "HH:MM"-like string
    :return: Minute count
    """
    h, m = s.split(':')
    return int(h) * 60 + int(m)


def convert_sleep_notes(s):
    """
    Converts the concatenated string of sleep notes to the binary record, e.g.
    "Drank tea:Ate Late" to (0, 1, 0, 0, 1)
    :param s: The string contains sleep notes delimited by ':'
    :return: SleepNotes instance
    """
    drank_coffee = 0
    drank_tea = 0
    stressful_day = 0
    worked_out = 0
    ate_late = 0

    if isinstance(s, str):
        parts = s.split(':')

        # Just for confidence :)
        for part in parts:
            if part not in ['Drank coffee', 'Drank tea', 'Stressful day', 'Worked out', 'Ate late']:
                raise AssertionError('Unknown sleep note: ' + part)

        drank_coffee = 1 if 'Drank coffee' in parts else 0
        drank_tea = 1 if 'Drank tea' in parts else 0
        stressful_day = 1 if 'Stressful day' in parts else 0
        worked_out = 1 if 'Worked out' in parts else 0
        ate_late = 1 if 'Ate late' in parts else 0

    return SleepNotes(drank_coffee=drank_coffee, drank_tea=drank_tea, stressful_day=stressful_day,
                      worked_out=worked_out, ate_late=ate_late)


def adapt_sleep_cycle_data(file_name, user_id):
    """
    Reads csv file generated by Sleep Cycle app and converts it to the format used in the paper.
    :param file_name: CSV file path
    :param user_id: User ID
    :return: DataFrame with the used format.
    """
    raw = pd.read_csv(file_name, sep=';')

    res = raw[['Start', 'End', 'Time in bed', 'Sleep Notes']]
    res.columns = ['start', 'end', 'total', 'sleep_notes']
    res['start'] = pd.to_datetime(res['start'])
    res['end'] = pd.to_datetime(res['end'])
    res['total'] = res['total'].map(lambda x: convert_to_minutes(x))
    res['sleep_notes'] = res['sleep_notes'].map(lambda x: convert_sleep_notes(x))
    res['drank_coffee'] = res['sleep_notes'].map(lambda x: x.drank_coffee)
    res['drank_tea'] = res['sleep_notes'].map(lambda x: x.drank_tea)
    res['worked_out'] = res['sleep_notes'].map(lambda x: x.worked_out)
    res['stressful_day'] = res['sleep_notes'].map(lambda x: x.stressful_day)
    res['ate_late'] = res['sleep_notes'].map(lambda x: x.ate_late)
    res['rate'] = raw['Sleep quality'].map(lambda x: int(x[:-1]) / 10)

    res.drop(columns='sleep_notes', inplace=True)
    res.insert(0, 'user_id', user_id)

    return res


def adapt_simple_sleep_data(file_name, user_id):
    """
    Reads manually created by the 4th user csv file and converts it to the format used in the paper.
    :param file_name: CSV file path
    :param user_id: User ID
    :return: DataFrame with the used format.
    """
    raw = pd.read_csv(file_name, dtype={'Duration': str})

    raw.columns = ['start_date', 'start_time', 'end_time', 'total', 'asleep_rate', 'got_up_rate', 'after_rate']
    raw['start'] = raw['start_date'] + ' ' + raw['start_time']
    raw['end'] = raw['start_date'] + ' ' + raw['end_time']
    raw['total'] = raw['total'].map(lambda x: convert_to_minutes(x.replace('.', ':')))

    res = pd.DataFrame()
    res['start'] = pd.to_datetime(raw['start'])
    res['end'] = pd.to_datetime(raw['end'])
    res['end'].loc[res['end'].dt.hour * 60 + res['end'].dt.minute < res['start'].dt.hour * 60 + res['start'].dt.minute] \
        = res['end'] + pd.Timedelta(days=1)
    res['total'] = raw['total']
    res['drank_coffee'] = 0
    res['drank_tea'] = 0
    res['worked_out'] = 0
    res['stressful_day'] = 0
    res['ate_late'] = 0
    res['rate'] = ((raw['asleep_rate'] + raw['got_up_rate'] + raw['after_rate']) / 3 * 2).round(decimals=1)

    res.insert(0, 'user_id', user_id)

    return res


def make_concatenated_dataset():
    """
    Reads all used CSV files and returns the concatenated dataset with the used format.
    :return: DataFrame with the used format
    """
    adapted = []

    user_id = 1
    for sleep_cycle_file in [
        '../data/sd1.csv',
        '../data/sd2.csv',
        '../data/sd3.csv'
    ]:
        adapted.append(adapt_sleep_cycle_data(sleep_cycle_file, user_id))
        user_id += 1

    adapted.append(adapt_simple_sleep_data('../data/simple1.csv', user_id))

    return pd.concat(adapted)


def make_classified(ds):
    """
    Reduces the data variability in the given dataset by the following rules:
    1. Total sleep time is rounded to hours
    2. Lay time and wake up time are classified to 12 classes: 0-2, 2-4, ...

    Resulting dataset is used for data analysis, but not for the experiments.

    :param ds: DataFrame with the used format
    :return: DataFrame with reduced data variability
    """
    res = pd.DataFrame()

    res['user_id'] = ds['user_id']
    res['is_weekend'] = (ds['start'].dt.dayofweek // 5 == 1).astype(int)
    res['lay_time'] = ''
    res['wake_up_time'] = ''
    res['total'] = (ds['total'] / 60).round(decimals=0)
    res['drank_coffee'] = ds['drank_coffee']
    res['drank_tea'] = ds['drank_tea']
    res['worked_out'] = ds['worked_out']
    res['stressful_day'] = ds['stressful_day']
    res['ate_late'] = ds['ate_late']
    res['rate'] = ds['rate']

    for r in [[i * 2, (i + 1) * 2, f'{i * 2}_{(i + 1) * 2}'] for i in range(0, 12)]:
        res['lay_time'][(ds['start'].dt.hour >= r[0]) & (ds['start'].dt.hour < r[1])] = r[2]
        res['wake_up_time'][(ds['end'].dt.hour >= r[0]) & (ds['end'].dt.hour < r[1])] = r[2]

    return res


def make_classified_2(ds):
    """
    Reduces the data variability in the given dataset by the following rules:
    1. Total sleep time is rounded to tens of minutes
    2. Lay time and wake up time are classified to 24 classes: 0, 1, 2, ..., each corresponds to particular hour

    Resulting dataset is used for the experiments.

    :param ds: DataFrame with the used format
    :return: DataFrame with reduced data variability
    """
    res = pd.DataFrame()

    res['user_id'] = ds['user_id']
    res['is_weekend'] = (ds['start'].dt.dayofweek // 5 == 1).astype(int)
    res['lay_time'] = ''
    res['wake_up_time'] = ''
    res['total'] = (ds['total'] / 10).round(decimals=0)
    res['drank_coffee'] = ds['drank_coffee']
    res['drank_tea'] = ds['drank_tea']
    res['worked_out'] = ds['worked_out']
    res['stressful_day'] = ds['stressful_day']
    res['ate_late'] = ds['ate_late']
    res['rate'] = ds['rate']

    for r in [[i, (i + 1), f'{i}_{(i + 1)}'] for i in range(0, 24)]:
        res['lay_time'][(ds['start'].dt.hour >= r[0]) & (ds['start'].dt.hour < r[1])] = r[2]
        res['wake_up_time'][(ds['end'].dt.hour >= r[0]) & (ds['end'].dt.hour < r[1])] = r[2]

    return res


def main():
    concatenated = make_concatenated_dataset()
    concatenated.to_csv('../data/sleepdata.csv', index=False)

    classified = make_classified(concatenated)
    classified.to_csv('../data/sleepdata_classified.csv', index=False)

    classified2 = make_classified_2(concatenated)
    classified2.to_csv('../data/sleepdata_classified_2.csv', index=False)


if __name__ == '__main__':
    pd.options.mode.chained_assignment = None

    main()
